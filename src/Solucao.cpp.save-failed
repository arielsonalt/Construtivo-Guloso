#include "../include/Solucao.h"
#include <string>
#include <stdio.h>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <algorithm>
#include <ctime>

using namespace std;

#define NUMERO_TURMAS 50

Solucao::Solucao() {
    //gerarTurmas();
    //imprimir();
    Idturma = 0;

}


void Solucao::imprimir() {
    Turma b;
    for( int i = 0; i < vetorTurmas.size(); i++) {
        b=vetorTurmas[i];
        for(int j=0; j <b.vetorAlunos.size(); j++) {
            cout<<b.vetorAlunos[j].nomeCliente<<endl;
        }
    }
}

void Solucao::calcularCusto() {
    float custoCT= 6000;
    float custoTotal = 0;
    float custoDeslocamento=1000;      // Valores multiplicados por 3;
    float custoHospedagem=900;
    float coffeBreak = 105;
    float custoCTs = 0;                 // Alexandre: inseri esta variavel e a da prox. linha para melhorar a avaliacao dos custos
    float custoClientes = 0;

    for (unsigned int i = 0; i < vetorTurmas.size(); i++) {
        if(instancia.vetorCTs[vetorTurmas[i].turmaCtId-1].custoCT==1) {
            custoTotal+=custoCT;
            custoCTs += custoCT;
        }
        // varre o vetorAlunos
        for(int j=0; j<vetorTurmas[i].vetorAlunos.size(); j++) {
            //coffeBreack e custo ct;
            // se o ct dessa turma tem custo o coffee break custa dobrado
            if( instancia.vetorCTs[vetorTurmas[i].turmaCtId-1].custoCT == 0) {
                custoTotal+=coffeBreak;
                custoClientes+=coffeBreak;
            } else {
                custoTotal+=coffeBreak*2;
                custoClientes+=coffeBreak*2;
            }
            float currDist = instancia.vetorDistancias[vetorTurmas[i].vetorAlunos[j].municipioIdCliente-1].distanciasCT[vetorTurmas[i].turmaCtId-1];


            if(currDist>=60) {
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 0) {
                    custoTotal+= custoHospedagem;
                    custoClientes+=custoHospedagem;
                }
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 1) {
                    custoTotal+= custoHospedagem * 1.5;
                    custoClientes+=custoHospedagem * 1.5;
                }
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 2) {
                    custoTotal+= custoHospedagem * 2;
                    custoClientes+=custoHospedagem * 2;
                }

            }
            if(currDist>=300) {
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 0) {
                    custoTotal+= custoDeslocamento;
                    custoClientes+=custoDeslocamento;
                }
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 1) {
                    custoTotal+= custoDeslocamento;
                    custoClientes+=custoDeslocamento;
                }
                if(vetorTurmas[i].vetorAlunos[j].nivelCliente == 2) {
                    custoTotal+= custoDeslocamento *1.5;
                    custoClientes+=custoDeslocamento * 1.5;
                }
            }
        }
    }
    cout<<"Custo: " << custoTotal << " -> " << custoCTs << " + " << custoClientes << endl;
}


// Struct no modelo do CT.h
typedef struct ct {
    int ctId;
    string nomeCidadeCT;
    int custoCT;
    vector <Turma> turmasNoCt;
};
// Vetor do tipo ct
vector <ct> CTs;

void Solucao::construtivo() {

    int cont=0,cont1=0, cont2=0,teste=0;

    bool clienteAlocado;


    // Aqui é adicionado ao vetor "CTs" de Solucao uma cópia do vetor "vetorCTs" de Instancias
    for(int x=0; x<instancia.vetorCTs.size(); x++) {
        ct molde;
        molde.ctId = instancia.vetorCTs[x].ctId;
        molde.custoCT = instancia.vetorCTs[x].custoCT;
        molde.nomeCidadeCT = instancia.vetorCTs[x].nomeCidadeCT;
        CTs.push_back(molde);
    }
    srand(unsigned(time(0)));
    random_shuffle(instancia.vetorClientes.begin(), instancia.vetorClientes.end());
    for(int i=0; i<instancia.vetorClientes.size(); i++) {

        clienteAlocado = false;  // Alexandre: inserido!

        for(int k=0; k<instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT.size(); k++) {

            if(instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT[k] <=60) {

                if(alocaClientes(k,i)) {
                    clienteAlocado = true;
                    cont++;
                    break;
                }
            }
        }

        // Alexandre: TIVE que repetir o for, pois se ainda não está alocado e já passou por todos os CTs a
        //              menos de 60km, ainda precisa procurar nos demais
        if (!clienteAlocado) {
            for(int k=0; k<instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT.size(); k++) {
                if(instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT[k] > 60
                        && instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT[k] < 300) {


                    if(alocaClientes(k,i)) {

                        clienteAlocado = true;
                        cont1++;
                        break;
                    }

                }
            }
        }

        // Alexandre: TIVE que repetir o for, pois se ainda não está alocado e já passou por todos os CTs a
        //              menos de 300km, ainda precisa procurar nos demais
        if (!clienteAlocado) {
            for(int k=0; k<instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT.size(); k++) {
                if(instancia.vetorDistancias[instancia.vetorClientes[i].municipioIdCliente-1].distanciasCT[k] >= 300) {

                    //if(alocaClientesComDistanciaMaiorIqualTrezentos(k,i)) {
                    if (alocaClientes(k,i)) {
                        clienteAlocado = true;
                        cont2++;
                        break;
                    }
                }
            }
        }
    }

    Turma b;
    int cont3=0, turmas = 0;
    for(int p = 0; p<CTs.size(); p++) {
        for(int q=0; q<CTs[p].turmasNoCt.size(); q++) {
            turmas++;
            b =  CTs[p].turmasNoCt[q];
            vetorTurmas.push_back(b);
            for(int r=0; r<CTs[p].turmasNoCt[q].vetorAlunos.size(); r++) {
                cont3++;
            }
            cout<<CTs[p].turmasNoCt[q].vetorAlunos.size()<<endl;
        }
    }
    cout<<"teste: "<<teste<<endl;
    cout<<"Quantidade de turmas: "<<turmas++<<endl;
    cout<<"Quantidade de pessoas treinadas: "<<cont3<<endl;
    cout<<"Menor que 60: "<<cont<<endl;
    cout<<"Menor que 300: "<<cont1<<endl;
    cout<<"Maior que 300: "<<cont2<< " - " << cont+cont1+cont2 << endl;

}


bool Solucao::criarTurma(int k,int i) {
    Turma t;
    Idturma++;
    t.idTurma = Idturma;
    t.turmaCtId = k+1;
    t.vetorAlunos.push_back(instancia.vetorClientes[i]);
    CTs[k].turmasNoCt.push_back(t);
    return 1;
}
bool Solucao::insereAluno(int k,int i,int l) {
    Cliente c;
    c=instancia.vetorClientes[i];
    CTs[k].turmasNoCt[l].vetorAlunos.push_back(c);
    return 1;
}

bool Solucao::alocaClientes(int k, int i) {
    bool clienteAlocado = false;  //
    bool alocar;
    int idCidade;
    string subArea;

    if(CTs[k].turmasNoCt.size() == 0) {
        if(criarTurma(k,i)) {
            clienteAlocado = true;
        }
        return clienteAlocado;
    }

    if(CTs[k].turmasNoCt.size()<=NUMERO_TURMAS) {

        for(int l=0; l<CTs[k].turmasNoCt.size(); l++) {
            if(CTs[k].turmasNoCt[l].vetorAlunos.size() < 20) {
                subArea = instancia.vetorClientes[i].subAreaCliente;
                idCidade = instancia.vetorClientes[i].municipioIdCliente;
                alocar = true;
                for(int r=0; r<CTs[k].turmasNoCt[l].vetorAlunos.size(); r++) {
                    if(CTs[k].turmasNoCt[l].vetorAlunos[r].subAreaCliente == subArea
                            && CTs[k].turmasNoCt[l].vetorAlunos[r].municipioIdCliente == idCidade ) {
                        alocar = false;
                    }
                }
                if(alocar) {
                    clienteAlocado = insereAluno(k,i,l);
                    return 1;
                }

            }
        }
        if (!clienteAlocado && (CTs[k].turmasNoCt.size() < NUMERO_TURMAS)) {
            if(criarTurma(k,i)) {
                clienteAlocado = true;
                return 1;
            }
        }
    }
    return clienteAlocado;
}


void Solucao::realocar() {
    bool alocado=false,chave=false, chave2,chave3;
    int tamanhoTurma;
    int idCidade;
    string subArea;
    //Enquanto existir (turma <=5) ou (turma > 5 && turma < 10)
    while(chave==false) {
        //para to ct
        chave2=false;
        for(int a=0; a<CTs.size(); a++) {
            //para toda turma no ct
            for(int b=0; b<CTs[a].turmasNoCt.size(); b++) {

                // se turma menor ou igual a 5
                if(CTs[a].turmasNoCt[b].vetorAlunos.size()<=5) {
                    //para todo aluno
                    chave2=true;
                    tamanhoTurma = CTs[a].turmasNoCt[b].vetorAlunos.size();
                    for(int c=0; c<tamanhoTurma; c++) {
                        //para todo ct
                        for(int d=0; d<CTs.size(); d++) {
                            // para toda turma
                            alocado = false;
                            for(int e=0; e<CTs[d].turmasNoCt.size(); e++) {
                                //se tamanho da turma >=10 && turma < 20
                                if(CTs[d].turmasNoCt[e].vetorAlunos.size()>=10
                                        && CTs[d].turmasNoCt[e].vetorAlunos.size()<20) {

                                    idCidade = CTs[a].turmasNoCt[b].vetorAlunos[c].municipioIdCliente;
                                    subArea = CTs[a].turmasNoCt[b].vetorAlunos[c].subAreaCliente;
                                    alocado = true;
                                    // garante que não exista cliente de mesma sub-area na turma
                                    for(int f=0; f<CTs[d].turmasNoCt[e].vetorAlunos.size(); f++) {
                                        if(CTs[d].turmasNoCt[e].vetorAlunos[f].municipioIdCliente == idCidade
                                                && CTs[d].turmasNoCt[e].vetorAlunos[f].subAreaCliente == subArea) {
                                            alocado=false;
                                        }
                                    }
                                    if(alocado=true) {
                                        //insere o aluno na turma encontrada
                                        CTs[d].turmasNoCt[e].vetorAlunos.push_back(CTs[a].turmasNoCt[b].vetorAlunos[c]);
                                        //Apaga cliente da origem
                                        CTs[a].turmasNoCt[b].vetorAlunos.erase(CTs[a].turmasNoCt[b].vetorAlunos.begin()+c);
                                        break;
                                    }
                                }
                            }
                            if(alocado==true) {
                                break;
                            }
                        }
                    }
                    //se a turma de quantidade <=5 estuver vazia ela será apagada
                    if(alocado==true && CTs[a].turmasNoCt[b].vetorAlunos.size()==0) {
                        CTs[a].turmasNoCt.erase(CTs[a].turmasNoCt.begin()+b);
                        break;
                    }
                }
                // se turma > 5 && turma <10
                if(CTs[a].turmasNoCt[b].vetorAlunos.size()>5 && CTs[a].turmasNoCt[b].vetorAlunos.size()<10) {
                    //para todo aluno
                    chave2=true;
                    tamanhoTurma = CTs[a].turmasNoCt[b].vetorAlunos.size();
                    for(int c=0; c<tamanhoTurma; c++) {
                        //para todo ct
                        for(int d=0; d<CTs.size(); d++) {
                            // para toda turma

                            alocado = false;
                            for(int e=0; e<CTs[d].turmasNoCt.size(); e++) {

                                //se a Turma procurada for >10 e <=20
                                if(CTs[d].turmasNoCt[e].vetorAlunos.size()>10 && CTs[d].turmasNoCt[e].vetorAlunos.size()<=20) {

                                    idCidade = CTs[d].turmasNoCt[e].vetorAlunos[0].municipioIdCliente;
                                    subArea = CTs[d].turmasNoCt[e].vetorAlunos[0].subAreaCliente;
                                    alocado = true;
                                    // garante que não exista cliente de mesma sub-area na turma
                                    for(int f=0; f<CTs[a].turmasNoCt[b].vetorAlunos.size(); f++) {
                                        if(CTs[a].turmasNoCt[b].vetorAlunos[f].municipioIdCliente == idCidade
                                                && CTs[a].turmasNoCt[b].vetorAlunos[f].subAreaCliente == subArea) {
                                            alocado=false;
                                        }
                                    }
                                    if(alocado=true) {
                                        // retira um cliente
                                        CTs[a].turmasNoCt[b].vetorAlunos.push_back(CTs[d].turmasNoCt[e].vetorAlunos[0]);
                                        //Apaga cliente da origem
                                        CTs[d].turmasNoCt[e].vetorAlunos.erase(CTs[d].turmasNoCt[e].vetorAlunos.begin()+0);
                                        break;
                                    }

                                }
                            }

                            if(alocado==true) {
                                break;
                            }

                        }
                        if(alocado==true) {
                            break;
                        }
                    }

                    if(alocado==true) {
                        break;
                    }
                }
            }
        }
        if(chave2==false) {
            chave=true;
        }
    }
}
